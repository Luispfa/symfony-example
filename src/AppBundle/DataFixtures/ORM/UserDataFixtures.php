<?php

namespace AppBundle\DataFixtures\ORM;

use AppBundle\Entity\User;
use Doctrine\Common\DataFixtures\AbstractFixture;
use Doctrine\Common\DataFixtures\OrderedFixtureInterface;
use Doctrine\Common\Persistence\ObjectManager;
use Symfony\Component\DependencyInjection\ContainerAwareInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;

class UserDataFixtures extends AbstractFixture implements OrderedFixtureInterface, ContainerAwareInterface
{
    private $container;

    public function setContainer(ContainerInterface $container = null)
    {
        $this->container = $container;
    }

    public function load(ObjectManager $manager)
    {
        $encoderFactory = $this->container->get('security.encoder_factory');

        foreach ($this->userInfoList as $info) {
            $user = new User();
            $user
                ->setName($info['name'])
                ->setSalt(base_convert(sha1(uniqid(mt_rand(), true)), 16, 36))
                ->setSurname($info['surname'])
                ->setUsername(str_replace(' ', '', $info['name'] . $info['surname']))
                ->setEmail($info['email'])
                ->setBiography('lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam consequat risus vestibulum, maximus elit vitae, hendrerit mauris. Sed finibus, odio non consequat ultricies, ex urna hendrerit mauris, ut posuere diam elit et sem. Morbi eget mauris condimentum, egestas nulla vitae, tempor enim. Fusce semper volutpat elit, eu fringilla tellus tincidunt ut. Suspendisse potenti. Cras ultrices varius arcu ut gravida. Donec auctor mauris in risus blandit, eu consequat felis vestibulum.')
                ->setImage('http://placehold.it/300x300');

            $encoder = $encoderFactory->getEncoder($user);
            $encodedPass = $encoder->encodePassword(123456, $user->getSalt());
            $user->setPassword($encodedPass);

            $user->addRole(User::ROLE_DEFAULT);
            if (1 === rand(0, 2)) {
                $user->addRole('ROLE_ADMIN');
            }

            $manager->persist($user);
        }

        $manager->flush();
    }

    public function getOrder()
    {
        return 1;
    }

    /**
     * This info is generated by "Fake Name Generator"
     * http://www.fakenamegenerator.com/.
     *
     * Array that contains first name, last name and email.
     *
     * @return string[]
     */
    private $userInfoList = [
        ['name' => 'Stephen', 'surname' => 'Johnstone', 'email' => 'stephenjohnstone@jourrapide.com'],
        ['name' => 'Grace', 'surname' => 'Archer', 'email' => 'gracearcher@fleckens.hu'],
        ['name' => 'Etelvina', 'surname' => 'DomÃ­nquez', 'email' => 'etelvinadominquezsotelo@rhyta.com'],
        ['name' => 'Karol', 'surname' => 'Posada', 'email' => 'karolposadafierro@teleworm.us'],
        ['name' => 'William', 'surname' => 'Barnes', 'email' => 'williamsbarnes@cuvox.de'],
        ['name' => 'Tom', 'surname' => 'Ferguson', 'email' => 'tomferguson@cuvox.de'],
        ['name' => 'Heidi', 'surname' => 'Sinclair', 'email' => 'heidisinclair@superrito.com'],
        ['name' => 'Enoc', 'surname' => 'Meza', 'email' => 'enocmezahidalgo@dayrep.com'],
        ['name' => 'Eden', 'surname' => 'Scott', 'email' => 'edenscott@gustr.com'],
        ['name' => 'Theodore', 'surname' => 'Gordon', 'email' => 'theodoregordon@jourrapide.com'],
        ['name' => 'Lawrence', 'surname' => 'Mitchell', 'email' => 'lawrenceMitchell@gustr.com'],
        ['name' => 'Eryn', 'surname' => 'Wright', 'email' => 'erynwright@rhyta.com'],
        ['name' => 'Haiden', 'surname' => 'McLean', 'email' => 'haidenmcLean@gustr.com'],
        ['name' => 'Danyl', 'surname' => 'Alexander', 'email' => 'danylalexander@superrito.com'],
        ['name' => 'Llano', 'surname' => 'Haro', 'email' => 'llanosharosegovia@jourrapide.com'],
        ['name' => 'Edward', 'surname' => 'Sullivan', 'email' => 'edwardsullivan@gustr.com'],
        ['name' => 'Louisa', 'surname' => 'Jamieson', 'email' => 'louisajamieson@jourrapide.com'],
        ['name' => 'Marie', 'surname' => 'Fulton', 'email' => 'marielafulton@dayrep.com'],
        ['name' => 'Millie', 'surname' => "O'Brien", 'email' => 'millieobrien@dayrep.com'],
        ['name' => 'Ornella', 'surname' => 'Morales', 'email' => 'ornellamoralesLuevano@superrito.com'],
        ['name' => 'Leontina', 'surname' => 'Bernal', 'email' => 'leontinabernalverduzco@superrito.com'],
        ['name' => 'Aureo', 'surname' => 'Prieto', 'email' => 'aureoprietocepeda@cuvox.de'],
        ['name' => 'Charlotte', 'surname' => 'Clubb', 'email' => 'charlottemclubb@rhyta.com'],
        ['name' => 'Seth', 'surname' => 'Thompson', 'email' => 'seththompson@jourrapide.com'],
        ['name' => 'Pedro', 'surname' => 'Jackson', 'email' => 'pedrojjackson@cuvox.de'],
        ['name' => 'Floren', 'surname' => 'Aguilera', 'email' => 'florenceaguileraespinosa@cuvox.de'],
        ['name' => 'Michael', 'surname' => 'Irvin', 'email' => 'michaelirvin@rhyta.com'],
        ['name' => 'Preston', 'surname' => 'Johnstone', 'email' => 'prestonjohnstone@superrito.com'],
        ['name' => 'Kristin', 'surname' => 'Stahr', 'email' => 'kristinrstahr@jourrapide.com'],
        ['name' => 'Daisy', 'surname' => 'Middleton', 'email' => 'daisymiddleton@cuvox.de'],
        ['name' => 'Georgia', 'surname' => 'Farrell', 'email' => 'georgiafarrell@jourrapide.com'],
    ];
}
